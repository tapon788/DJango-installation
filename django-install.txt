ISSUES
-------
An Alternative
pip install mysqlclient==1.3.4

1) 	Must use Python 2.7 as we are going to use MySQLDB
2)	Must add your python.exe,virtualenv.exe and pip.exe path to environment variables.
		E.g.
		- echo %PATH%
		- setx PATH "%PATH%;C:\Python34\Scripts
2) 	Install MySQL and modify datadir in my.ini so that new modified datadir must-contain mysql and test default databases.
3) 	Latest Django may fail to give you auto-suggestion in manage.py utility, on that case under
	C:\Program Files (x86)\JetBrains\PyCharm 2016.1.3\helpers\pycharm\django_manage_commands_provider\_parser\
	replace parser.py with this one form github 
	(https://github.com/JetBrains/intellij-community/blob/master/python/helpers/pycharm/django_manage_commands_provider/_parser/parser.py)


install pip
	1)	Download get-pip.py
	2)	python get-pip.py
	3)	python -m pip install -U pip

Installing a Python Virtual Environment
	1)	pip install virtualenv 
	2)	virtualenv D:\env_mysite
	3) 	D:\env_mysite\activate
			You will notice your command prompt has now changed:
			(env_mysite) D:\env_mysite\>

Installing Django
	1)	pip install django==1.8.13 
	2)	pip freeze (check)

Start Project
	1)	django-admin startproject mysite 
	2)	cd mysite
	3)	python manage.py runserver

now if errors

replace C:\python27\Lib\fuctools.py around line 56

    convert = {
        '__lt__': [('__gt__', lambda self, other: other < self),
                   ('__le__', lambda self, other: not other < self),
                   ('__ge__', lambda self, other: not self < other)],
        '__le__': [('__ge__', lambda self, other: other <= self),
                   ('__lt__', lambda self, other: not other <= self),
                   ('__gt__', lambda self, other: not self <= other)],
        '__gt__': [('__lt__', lambda self, other: other > self),
                   ('__ge__', lambda self, other: not other > self),
                   ('__le__', lambda self, other: not self > other)],
        '__ge__': [('__le__', lambda self, other: other >= self),
                   ('__gt__', lambda self, other: not other >= self),
                   ('__lt__', lambda self, other: not self >= other)]
    }

with

convert = {
    '__lt__': [('__gt__', lambda self, other: not (self < other or self == other)),
               ('__le__', lambda self, other: self < other or self == other),
               ('__ge__', lambda self, other: not self < other)],
    '__le__': [('__ge__', lambda self, other: not self <= other or self == other),
               ('__lt__', lambda self, other: self <= other and not self == other),
               ('__gt__', lambda self, other: not self <= other)],
    '__gt__': [('__lt__', lambda self, other: not (self > other or self == other)),
               ('__ge__', lambda self, other: self > other or self == other),
               ('__le__', lambda self, other: not self > other)],
    '__ge__': [('__le__', lambda self, other: (not self >= other) or self == other),
               ('__gt__', lambda self, other: self >= other and not self == other),
               ('__lt__', lambda self, other: not self >= other)]
}


STATIC FILES
-------------
Django static files are used to keep resource files like css, js, images and so on.
Static files directory can be one or more depending on our requirement.


All we need to do in to specify which one, what are the static files 
in settings.py under the main project's app.
Its always better to set a directory which is not hard-coded and can be fit anywhere the main project moves.
Example:

STATICFILES_DIRS = [
	
    os.path.join(BASE_DIR, "myapp/static"),
    os.path.join(BASE_DIR, "django_project/static"),
    ]

Above, if the Main project directory is F:\python36\Scripts\django_projects,
following 2 directories will be considered as static files directory by Django point of view:

		F:\python36\Scripts\django_projects\myapp\static
		F:\python36\Scripts\django_projects\django_project\static

Collecting static files:

Now we can have several application in a Django project. If we want to collect all of our static files in one 
place then we can go for following process:

1) Define STATIC_ROOT in settings.py [e.g STATIC_ROOT = os.path.join(BASE_DIR, 'static')]
2) Run manage.py for collectstatic like: python manage.py collectstatic

Remeber: Dont define STATIC_ROOT to any one of STATICFILES_DIRS directory. Its not Django's way of defining.


templates 
----------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            # ... some options here ...
        },
    },
]
BACKEND ->	is a dotted Python path to a template engine class 
			implementing Django’s template backend API
DIRS    -> 	where the engine should look for template source files
APP_DIRS -> tells whether the engine should look for templates inside 
			installed applications (subdirectory in each of the INSTALLED_APPS)
OPTIONS  ->	contains backend-specific settings.

If you want to have a set of master templates at project root, 
e.g. mysite/templates, you do need to set DIRS, like so:
	
	'DIRS': [os.path.join(BASE_DIR, 'templates')],


(Appendix E contains the full list of tags and filters)
a tag just tells the template system to “do something”
	1)   {{ person_name }}) is a variable
	2)	 Any text that’s surrounded by curly braces and percent signs 
		(e.g.{% if ordered_warranty %}) is a template tag.
	3)	{{ ship_date|date:"F j, Y" }}
		passing the ship_date variable to the date filter, 
		giving the date filter the argument "F j, Y"


MODELS


in settings.py

# Database
#...
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

ENGINE tells Django sqlite database engine to use
NAME tells Django the name of your database. For example: 'NAME': 'mydb',

Steps:
1) in the directory where your manage.py file is type:
python manage.py startapp books 
2) In the models.py file that was created by the startapp command, enter the following:

from django.db import models

class Publisher(models.Model):
    name = models.CharField(max_length=30)
    address = models.CharField(max_length=50)
    city = models.CharField(max_length=60)
    state_province = models.CharField(max_length=30)
    country = models.CharField(max_length=50)
    website = models.URLField()

class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=40)
    email = models.EmailField()

class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)
    publisher = models.ForeignKey(Publisher)
    publication_date = models.DateField()


3) To register our “books” app, add 'books' to INSTALLED_APPS,
INSTALLED_APPS = (
'django.contrib.admin',
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.messages',
'django.contrib.staticfiles',
'books',
)
python manage.py check -> validate the models
python manage.py makemigrations books -> django's way of creating a file 0001_initial.py
python manage.py sqlmigrate books 0001 ->  prints what SQL Django would execute if you asked it
python manage.py migrate -> COMMIT

Basic Data Access
python manage.py shell 

Insert:
>>> p1 = Publisher(name='Apress', address='2855 Telegraph Avenue',city='Berkeley', state_province='CA', country='U.S.A.',website='http://www.apress.com/')
>>> p1.save()
>>> p2 = Publisher(name="O'Reilly", address='10 Fawcett St.',city='Cambridge', state_province='MA', country='U.S.A.',website='http://www.oreilly.com/')
>>> p2.save()
Select *:
>>> publisher_list = Publisher.objects.all()
>>> publisher_list
[<Publisher: Publisher object>, <Publisher: Publisher object>]
Filter:
>>> Publisher.objects.filter(country="U.S.A.",
state_province="CA")
[<Publisher: Apress>]
>>> Publisher.objects.filter(name__contains="press")
[<Publisher: Apress>]

Retrieving Single Objects:
>>> Publisher.objects.get(name="Apress")
<Publisher: Apress>

Admin site
python manage.py createsuperuser
	give user,email and password
Access at: 127.0.0.1:PORT/admin/

Adding Models to Django Admin
in admin.py at books app

from .models import Publisher, Author, Book

admin.site.register(Publisher)
admin.site.register(Author)
admin.site.register(Book)

